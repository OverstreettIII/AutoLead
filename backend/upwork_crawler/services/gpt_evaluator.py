import os
import time
import json
from openai import OpenAI
from upwork_crawler.upwork_crawler.models import Job
from dotenv import load_dotenv
load_dotenv(dotenv_path="/app/.env")  # n·∫°p th·ªß c√¥ng bi·∫øn m√¥i tr∆∞·ªùng

client = OpenAI(api_key=os.getenv("OPENAI_API_TOKEN"))

PROMPT_TEMPLATE = """
Y√™u c·∫ßu job:
{job_description}

H√£y ƒë√°nh gi√°:
1. ƒê·ªô kh√≥ task (1-10)
2. Intern Dev c√≥ l√†m ƒë∆∞·ª£c kh√¥ng?
3. Copilot h·ªó tr·ª£ ƒë∆∞·ª£c kh√¥ng?
4. ∆Ø·ªõc l∆∞·ª£ng th·ªùi gian ho√†n th√†nh (gi·ªù)

‚ö†Ô∏è Tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng JSON nh∆∞ sau, KH√îNG vi·∫øt g√¨ ngo√†i n√≥:

{{
    "gpt_difficulty": 4,
    "gpt_intern": true,
    "gpt_copilot": true,
    "gpt_estimated_hours": 15.5
}}
"""

def evaluate_job_with_gpt(job_description):
    prompt = PROMPT_TEMPLATE.format(job_description=job_description)

    print("\nüìù Prompt g·ª≠i GPT:")
    print(prompt[:1000])

    for attempt in range(3):
        try:
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.2,
            )
            content = response.choices[0].message.content.strip()
            print("\nüì© GPT tr·∫£ v·ªÅ:")
            print(content)

            parsed = json.loads(content)

            return {
                "gpt_difficulty": int(parsed["gpt_difficulty"]),
                "gpt_intern": bool(parsed["gpt_intern"]),
                "gpt_copilot": bool(parsed["gpt_copilot"]),
                "gpt_estimated_hours": float(parsed["gpt_estimated_hours"]),
                "gpt_response": parsed,
            }

        except Exception as e:
            print(f"[GPT ERROR] {type(e).__name__}: {e}")
            time.sleep(2)

    return None

def run_gpt_evaluation():
    jobs = Job.objects.filter(gpt_response__isnull=True)
    print(f"üëâ Found {jobs.count()} jobs to evaluate")

    for job in jobs:
        print(f"\n‚ú® Evaluating job: {job.title}")

        try:
            result = evaluate_job_with_gpt(job.description)

            if result:
                job.gpt_difficulty = result["gpt_difficulty"]
                job.gpt_intern = result["gpt_intern"]
                job.gpt_copilot = result["gpt_copilot"]
                job.gpt_estimated_hours = result["gpt_estimated_hours"]
                job.gpt_response = result["gpt_response"]
                job.save()
                print(f"‚úÖ Saved GPT evaluation for: {job.title}")
            else:
                print(f"‚ùå GPT evaluation failed (no result) for: {job.title}")

        except Exception as e:
            print(f"‚ùå GPT evaluation ERROR for: {job.title}")
            print(f"[ERROR] {type(e).__name__}: {e}")
